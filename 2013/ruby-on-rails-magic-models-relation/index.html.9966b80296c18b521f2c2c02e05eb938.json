{"head":{"layout":"Post","tags":["Ruby on Rails"],"title":"Ruby on Rails magic: models relation","date":"2013-02-18T00:00:00.000Z","route":"2013/ruby-on-rails-magic-models-relation","image":"/assets/ruby-on-rails-magic-models-relation.jpeg","imageUrl":"https://unsplash.com/photos/PAykYb-8Er8","imageAuthor":"Ian Schneider","imageAuthorUrl":"https://unsplash.com/@goian","imageProviderName":"Unsplash","imageProviderUrl":"https://unsplash.com/","primaryColor":"rgba(255, 214, 156, 0.8)","secondaryColor":"#47281e","linksColor":"#4878A8","linksHoverColor":"#A8D8F0","description":"5 months ago I demonstrated a convention of RoR that makes it possible to render Model objects in their corresponding partials in just one…"},"body":"<p>5 months ago I <a href=\"/2012/ruby-on-rails-magic-first-impression/\">demonstrated</a> a\nconvention of RoR that makes it possible to render Model objects in their\ncorresponding partials in just one line with expressive syntax:</p>\n<pre><code class=\"hljs language-rhtml\">&#x3C;%= <span class=\"hljs-keyword\">render</span> @users %></code></pre>\n<p>Today I want to show another tip I learned about\n<a href=\"http://guides.rubyonrails.org/association_basics.html\">ActiveRecord</a> from this\n<a href=\"https://tutsplus.com/course/riding-ruby-on-rails/\">tutsplus course</a> recorded\nby José Mota.</p>\n<h2 id=\"accessing-a-model-via-its-parent\"><a href=\"#accessing-a-model-via-its-parent\" class=\"phenomic-HeadingAnchor\">#</a>Accessing a model via it's parent</h2>\n<p>Assuming we have 2 models with <code>has_many</code> and <code>belongs_to</code> relations\nrespectively:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> &#x3C; ActiveRecord::Base</span>\n  has_many <span class=\"hljs-symbol\">:posts</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Post</span> &#x3C; ActiveRecord::Base</span>\n  belongs_to <span class=\"hljs-symbol\">:user</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>Now we want to list all posts written by User in a View. Here is what I did at\nfirst myself.</p>\n<p>Controller:</p>\n<pre><code class=\"hljs language-ruby\">@user   = User.find(params[<span class=\"hljs-symbol\">:id</span>])\n<span class=\"hljs-comment\"># Find all posts by <span class=\"hljs-doctag\">@user</span></span>\n@posts  = Post.where(<span class=\"hljs-string\">\"user_id = ?\"</span>, @user.id)</code></pre>\n<p>View:</p>\n<pre><code class=\"hljs language-rhtml\"><span class=\"xml\"></span>&#x3C;%<span class=\"ruby\"> @posts.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|post|</span> </span>%><span class=\"xml\">\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span></span>&#x3C;%=<span class=\"ruby\"> post.title </span>%><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</span>&#x3C;%<span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span>%><span class=\"xml\"></span></code></pre>\n<p>Did you already notice where I wrote too much? Well, of course in Controller.\nAssigning User to <code>@user</code> was more than enough as our User model has <code>has_many</code>\nrelation with Post model and so posts can be accessed via <code>@user.posts</code> due to\nmagic provided by ActiveRecord.</p>\n<p>Let's take a look at a more expressive code that accomplishes exactly the same\nresult.</p>\n<p>Controller:</p>\n<pre><code class=\"hljs language-ruby\">@user = User.find(params[<span class=\"hljs-symbol\">:id</span>])</code></pre>\n<p>View:</p>\n<pre><code class=\"hljs language-rhtml\"><span class=\"xml\"></span>&#x3C;%<span class=\"ruby\"> @user.posts.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|post|</span> </span>%><span class=\"xml\">\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span></span>&#x3C;%=<span class=\"ruby\"> post.title </span>%><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</span>&#x3C;%<span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span>%><span class=\"xml\"></span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" class=\"phenomic-HeadingAnchor\">#</a>Conclusion</h2>\n<p>This is a clear example where most generic complexity can be be hidden\nbehind the scenes and only self-explanatory command executions operate the main\nprogram logic. The importance of this aspect increases with codebase growth.</p>\n<p>The more self-explanatory code we write, the less human-readable comments we\nhave to add.</p>\n","__filename":"posts/2013-02-18-ruby-on-rails-magic-models-relation.md","__url":"/2013/ruby-on-rails-magic-models-relation/","__resourceUrl":"/2013/ruby-on-rails-magic-models-relation/index.html","__dataUrl":"/2013/ruby-on-rails-magic-models-relation/index.html.9966b80296c18b521f2c2c02e05eb938.json"}