{"head":{"layout":"Post","tags":["Ruby on Rails"],"description":"A short way of rendering a partial for list of Model objects in the View","title":"Ruby on Rails magic: first impression","date":"2012-09-18T00:00:00.000Z","route":"2012/ruby-on-rails-magic-first-impression","image":"/assets/ruby-on-rails-magic-first-impression.jpeg","imageUrl":"https://unsplash.com/photos/VLdaxYyXJvw","imageAuthor":"Sebastian Muller","imageAuthorUrl":"https://unsplash.com/@sebastianmuller","imageProviderName":"Unsplash","imageProviderUrl":"https://unsplash.com/","primaryColor":"rgba(183, 97, 113, .8)","secondaryColor":"#f8e7cf","linksColor":"#848D82","linksHoverColor":"#FD6E8A"},"body":"<h2 id=\"preface\"><a href=\"#preface\" class=\"phenomic-HeadingAnchor\">#</a>Preface</h2>\n<p>Being a PHP developer for more than 5 years I recently started learning\nRuby on Rails. While I'm used to <em>\"Convention over Configuration\"</em>\nprinciples in PHP frameworks I found not a few conventions in Ruby on Rails\nthat amazed me in some way.</p>\n<p>There is something that amazed me more than anything else and I couldn't\nhelp myself from writing about it when I discovered it in\n<a href=\"http://ruby.railstutorial.org/ruby-on-rails-tutorial-book\">this book</a>\nwritten by Michael Hartl.</p>\n<h2 id=\"render-a-partial-for-model-objects\"><a href=\"#render-a-partial-for-model-objects\" class=\"phenomic-HeadingAnchor\">#</a>Render a partial for model objects</h2>\n<p>Assuming we have a simple Controller action:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">index</span></span>\n  @users = User.all\n<span class=\"hljs-keyword\">end</span></code></pre>\n<p>..and a simple partial template called <code>_user.html.erb</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">%=</span> <span class=\"hljs-attr\">user.name</span> %></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>..let's take a look at it's View (<code>index.html.erb</code>):</p>\n<pre><code class=\"hljs language-rhtml\"><span class=\"xml\"></span>&#x3C;%<span class=\"ruby\"> @users.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|u|</span> </span>%><span class=\"xml\">\n  </span>&#x3C;%=<span class=\"ruby\"> render <span class=\"hljs-string\">'user'</span>, <span class=\"hljs-symbol\">user:</span> u </span>%><span class=\"xml\">\n</span>&#x3C;%<span class=\"ruby\"> <span class=\"hljs-keyword\">end</span> </span>%><span class=\"xml\"></span></code></pre>\n<p>Here, a partial <code>_user.html.erb</code> that resides in the same directory as\ncurrent template file is being rendered for every <code>@users</code> element.\nPretty straight-forward. Similarly I would do it in any PHP framework.</p>\n<p>However as it turns out View's code can be replaced with just one line:</p>\n<pre><code class=\"hljs language-rhtml\">&#x3C;%= <span class=\"hljs-keyword\">render</span> @users %></code></pre>\n<p>It looks simple and logical at first sight, however, if you think about it,\nthere are so many things happening in this line.</p>\n<p>Let's break it into pieces:</p>\n<ul>\n<li>Rails infers that <code>@users</code> is a list of <code>User</code> objects.</li>\n<li>Because <code>@users</code> is a list Rails iterates through every element.</li>\n<li>Because <code>@users</code> consists of User objects it assigns every object\nto partial's variable <code>user</code> and renders a partial called <code>_user.html.erb</code></li>\n</ul>\n<p>If <code>@users</code> would be a list of <code>Post</code> objects, Rails would\nset partial's variable called <code>post</code> and render\na partial called <code>_post.html.erb</code> for every list element.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" class=\"phenomic-HeadingAnchor\">#</a>Conclusion</h2>\n<p>I'm a big fan of convention over configuration paradigm and such examples\nexcite me every time I discover them. I know it slows down the learning\nprogress in the beginning but it saves time in the long run.</p>\n","__filename":"posts/2012-09-18-ruby-on-rails-magic-first-impression.md","__url":"/2012/ruby-on-rails-magic-first-impression/","__resourceUrl":"/2012/ruby-on-rails-magic-first-impression/index.html","__dataUrl":"/2012/ruby-on-rails-magic-first-impression/index.html.5fc410989f67feb66f6617cb3647f740.json"}