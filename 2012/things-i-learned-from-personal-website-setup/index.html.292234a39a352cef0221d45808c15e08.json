{"head":{"layout":"Post","date":"2012-08-29T00:00:00.000Z","title":"Things I learned from personal website: setup","description":"Tips on setting up a static website with Jekyll and Github","route":"2012/things-i-learned-from-personal-website-setup","image":"/assets/things-i-learned-from-personal-website-setup.jpg","imageUrl":"https://unsplash.com/photos/6PF6DaiWz48","imageAuthor":"Rayi Christian Wicaksono","imageAuthorUrl":"https://unsplash.com/@mumolabs","imageProviderName":"Unsplash","imageProviderUrl":"https://unsplash.com/","primaryColor":"rgba(59, 59, 59, .8)","secondaryColor":"white","linksColor":"#FD6E8A","linksHoverColor":"#7C5D4A","tags":["jekyll","static website","github pages"]},"body":"<div class=\"session-post\">\n<p>This entry is part 1 of 3 in the <strong>Things I learned from personal website</strong> series:</p>\n<ul>\n<li>Part I, setup</li>\n<li>Part II, seo (coming soon)</li>\n<li>Part III, speed (coming soon)</li>\n</ul>\n</div>\n<h2 id=\"preface\"><a href=\"#preface\" class=\"phenomic-HeadingAnchor\">#</a>Preface</h2>\n<p>What can be better than creating a small personal website after years of\nworking with complex server-side driven systems. What I mean is that\nwhen setting up a simple static website from scratch I had more chances to get\nknown with all the aspects of a well baked website without being diverted by\nserver-side issues.</p>\n<p>In this entry I will share my experience with some nice tools and services I used\nwhile setting up my personal website:</p>\n<ul>\n<li><a href=\"http://jekyllrb.com/\">Jekyll</a> to handle website generation</li>\n<li><a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> format to write blog\nposts</li>\n<li><a href=\"http://disqus.com\">Disqus</a> for commenting</li>\n<li><a href=\"http://git-scm.com\">Git</a> to keep track of changes and to deploy</li>\n<li><a href=\"https://github.com\">Github</a> to host the website</li>\n</ul>\n<p>If you're unfamiliar with one of those tools, I highly recommend you checking them\nout and in this entry I expect that you have done that alrady. After you completed\nyour basic setup use this article as a helper guide for more advanced customization.</p>\n<h2 id=\"configuration\"><a href=\"#configuration\" class=\"phenomic-HeadingAnchor\">#</a>Configuration</h2>\n<p>Jekyll reads configuration data from <code>_config.yml</code> file in site's root\ndirectory.</p>\n<p>You are not limited to options recognized by Jekyll. You can store any data\nand retrieve it in any page/layout that contains\n<a href=\"http://jekyllrb.com/docs/frontmatter/\">YAML</a> form matter block.\nFor example, I can store my personal info:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">author:</span>\n<span class=\"hljs-attr\">  name:</span> <span class=\"hljs-string\">Sergey</span> <span class=\"hljs-string\">Lukin</span>\n<span class=\"hljs-attr\">  email:</span> <span class=\"hljs-string\">contact@sergeylukin.com</span>\n<span class=\"hljs-attr\">  about:</span> <span class=\"hljs-string\">About</span> <span class=\"hljs-string\">me</span> <span class=\"hljs-string\">text</span> <span class=\"hljs-string\">goes</span> <span class=\"hljs-string\">here</span>\n<span class=\"hljs-attr\">  profiles:</span>\n<span class=\"hljs-attr\">    - name:</span> <span class=\"hljs-string\">Github</span>\n<span class=\"hljs-attr\">      url:</span> <span class=\"hljs-attr\">https://github.com/sergeylukin</span>\n<span class=\"hljs-attr\">    - name:</span> <span class=\"hljs-string\">Twitter</span>\n<span class=\"hljs-attr\">      url:</span> <span class=\"hljs-attr\">https://twitter.com/sergey_lukin</span></code></pre>\n<p>and retrieve it in a page using <a href=\"https://github.com/shopify/liquid/wiki\">Liquid</a> syntax:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>My name is {{ site.author.name }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Social links:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n{% for profile in site.author.profiles %}\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{ profile.url }}\"</span>></span>{{ profile.name }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n{% endfor %}</code></pre>\n<p>The key here is <strong>site</strong> object - in this case we use it to access variables\nset in <code>_config.yml</code></p>\n<h2 id=\"navigation\"><a href=\"#navigation\" class=\"phenomic-HeadingAnchor\">#</a>Navigation</h2>\n<p>Navigation can be rendered by looping through <strong>site.pages</strong>.\nAdditionally, you can also set a variable, let's say, <strong>navigation</strong> in\nevery page you want to be in navigation menu and filter it in the loop. So,\nhere is the YAML front matter for a page that should show up in navigation:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">Page</span> <span class=\"hljs-string\">title</span>\n<span class=\"hljs-attr\">navigation:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-meta\">---</span></code></pre>\n<p>..then in navigation template loop over all pages and only print ones that have\n<strong>navigation</strong> variable set to <strong>true</strong> (also we can check the URLs and add additional\nmarkup if necessary):</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  {% for node in site.pages %}\n    {% if node.navigation == true %}\n      {% assign attr = nil %}\n      {% if page.url == node.url %}\n        {% capture attr %}class=\"active\"{% endcapture %}\n      {% endif %}\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{ node.url }}\"</span>{{ <span class=\"hljs-attr\">attr</span> }}></span>{{ node.title }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    {% endif %}\n  {% endfor %}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></code></pre>\n<p>In this example a comparison is done beween <strong>page.url</strong> and <strong>node.url</strong> and\nif no difference found, then variable <strong>attr</strong> gets a value of <code>class=\"active\"</code>\nwhich allows us to apply special styles to menu item.</p>\n<h2 id=\"list-posts\"><a href=\"#list-posts\" class=\"phenomic-HeadingAnchor\">#</a>List posts</h2>\n<p>Printing a list of items inside <code>_posts</code> directory is as easy as:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n  {% for item in site.posts limit:5 %}\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">time</span> <span class=\"hljs-attr\">datetime</span>=<span class=\"hljs-string\">\"{{ item.date | date: \"</span>%<span class=\"hljs-attr\">Y-</span>%<span class=\"hljs-attr\">m-</span>%<span class=\"hljs-attr\">d</span>\" }}\" <span class=\"hljs-attr\">pubdate</span>></span>{{ item.date | date: \"%B %d, %Y\" }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">time</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{ item.url }}\"</span>></span>{{ item.title }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  {% endfor %}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span></code></pre>\n<h2 id=\"creating-a-new-post\"><a href=\"#creating-a-new-post\" class=\"phenomic-HeadingAnchor\">#</a>Creating a New Post</h2>\n<p>To create a New Post I run\n<a href=\"https://github.com/sergeylukin/sergeylukin.github.com/blob/master/_bin/newdraft\">newdraft</a>\nscript:</p>\n<pre><code class=\"hljs language-bash\">./_bin/newdraft HERE GOES POST TITLE</code></pre>\n<h2 id=\"git-and-draft-posts\"><a href=\"#git-and-draft-posts\" class=\"phenomic-HeadingAnchor\">#</a>GIT and Draft posts</h2>\n<p>Usually it takes a while untill I finish writing a blog post. In the meanwhile I can\ndo changes to other parts of the website and I don't want GIT to recognize a\ndraft post as a new object. To avoid this I added following line in <code>.gitignore</code> file:</p>\n<pre><code class=\"hljs language-bash\">_posts/*.draft.*</code></pre>\n<p>So that any file in <code>_posts</code> directory that ends with <strong>draft.md</strong> or\n<strong>draft.markdown</strong> is ignored and only when I finish writing the post I remove\nthe <strong>draft</strong> from the filename.</p>\n<h2 id=\"syntax-highlighting\"><a href=\"#syntax-highlighting\" class=\"phenomic-HeadingAnchor\">#</a>Syntax highlighting</h2>\n<p>In almost every blog post of mine I insert code snippets so it's extremely\nimportant to have syntax highlighting feature included. Jekyll uses Pygments\nto handle this. Here is how I use it:</p>\n<pre><code class=\"hljs language-html\">{% highlight html %}\n..some code here..\n{% endhighlight %}</code></pre>\n<p>Wonder how I succeeded to print Liquid syntax without it being parsed?\nI placed it between <strong>{% raw %}</strong> and <strong>{% endraw %}</strong>\ntags. For more Liquid stuff consider reading\n<a href=\"https://github.com/shopify/liquid/wiki/liquid-for-designers\">Liquid for Designers</a>.</p>\n<p>Please note that Liquid v2.3.0 and higher supports tag <strong>{% raw %}</strong>\ninstead of <strong>{% literal %}</strong> as it was in v2.2.2.\nBesides that, I would highly recommend installing locally Jekyll and Liquid of\nexactly same versions as Github pages server is running (you can always check\nwhat software they are running\n<a href=\"https://help.github.com/articles/using-jekyll-with-pages\">here</a>)\nand generating a website locally before deploying. That way you will definitely\nidentify any potential problem as early as possible and it will save your time.</p>\n<h2 id=\"commenting\"><a href=\"#commenting\" class=\"phenomic-HeadingAnchor\">#</a>Commenting</h2>\n<p>My commenting platform of choice is <a href=\"http://disqus.com\">Disqus</a>. After signing up\nadd a little bit of configuration to <code>_config.yml</code>:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">disqus:</span>\n<span class=\"hljs-attr\">  enabled:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">  shortname:</span> <span class=\"hljs-string\">YOUR_DISQUS_SHORTNAME</span></code></pre>\n<p>and insert this piece of HTML/JavaScript wherever you want to enable comments:</p>\n<pre><code class=\"hljs language-javascript\">{% <span class=\"hljs-keyword\">if</span> site.disqus.enabled %}\n&#x3C;!-- Disqus -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"disqus_thread\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n&#x3C;noscript>Please enable JavaScript to view the &#x3C;<span class=\"hljs-regexp\">/noscript>\n&#x3C;a href=\"http:/</span><span class=\"hljs-regexp\">/disqus.com\" class=\"dsq-brlink\">comments powered by &#x3C;span class=\"logo-disqus\">Disqus&#x3C;/</span>span><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n&#x3C;script type=<span class=\"hljs-string\">\"text/javascript\"</span>>\n  <span class=\"hljs-keyword\">var</span> disqus_shortname = <span class=\"hljs-string\">'{{ site.disqus.shortname }}'</span>,\n      disqus_identifier = <span class=\"hljs-string\">'{{ page.id }}'</span>;\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> dsq = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);\n    dsq.type = <span class=\"hljs-string\">'text/javascript'</span>;\n    dsq.async = <span class=\"hljs-literal\">true</span>;\n    dsq.src = <span class=\"hljs-string\">'http://'</span> + disqus_shortname + <span class=\"hljs-string\">'.disqus.com/embed.js'</span>;\n    (<span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'head'</span>)[<span class=\"hljs-number\">0</span>] ||\n     <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'body'</span>)[<span class=\"hljs-number\">0</span>]).appendChild(dsq);\n  })();\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n{% endif %}</code></pre>\n<p>Please note that you can place this code in a separate file, let's say <code>disqus.html</code>\ninside <code>_includes</code> directory and only add one line wherever you want to include it:</p>\n<pre><code class=\"hljs language-html\">{% include disqus.html %}</code></pre>\n<h2 id=\"twitter-button\"><a href=\"#twitter-button\" class=\"phenomic-HeadingAnchor\">#</a>Twitter button</h2>\n<p>For official integration instructions refer to\n<a href=\"https://dev.twitter.com/docs/tweet-button\">their documentation</a>.\nAs an option you can add following to <code>_config.yml</code>:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">like_button_twitter:</span> <span class=\"hljs-literal\">true</span></code></pre>\n<p>create <code>_includes/like_button_twitter.html</code> with following contents:</p>\n<pre><code class=\"hljs language-javascript\">{% <span class=\"hljs-keyword\">if</span> site.like_button_twitter %}\n&#x3C;!-- Tweet btn -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://twitter.com/share\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"twitter-share-button\"</span>></span>Tweet<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n&#x3C;script>\n!<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d,s,id</span>)</span>{\n  <span class=\"hljs-keyword\">var</span> js,fjs=d.getElementsByTagName(s)[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">if</span>(!d.getElementById(id)) {\n    js=d.createElement(s);\n    js.id=id;js.src=<span class=\"hljs-string\">\"//platform.twitter.com/widgets.js\"</span>;\n    fjs.parentNode.insertBefore(js,fjs);\n  }\n}(<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">\"script\"</span>,<span class=\"hljs-string\">\"twitter-wjs\"</span>);\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n{% endif %}</code></pre>\n<p>and finally include it in template, like so:</p>\n<pre><code class=\"hljs language-html\">{% include like_button_twitter.html %}</code></pre>\n<h2 id=\"404-page\"><a href=\"#404-page\" class=\"phenomic-HeadingAnchor\">#</a>404 Page</h2>\n<p><a href=\"http://pages.github.com/\">GitHub pages</a> service makes it extremely easy to set custom\n404 page - just place, let's say, 404.md file in the root directory.\nAlso, I'm not huge fan of that, but I add index.md file to directories that\ndon't have index page (like /js/, /css/ etc.) and include content's of 404 page.\nAs long as I have those directories in the list of directories to ignore in robots.txt\nfile, it's not a big deal.</p>\n<h2 id=\"faviconico\"><a href=\"#faviconico\" class=\"phenomic-HeadingAnchor\">#</a>favicon.ico</h2>\n<p>Don't forget to place <strong>favicon.ico</strong> file in the root directory. Don't have one?\nCheck out <a href=\"http://www.favicon.cc/\">favicon.cc</a></p>\n<p>Add meta tag in page's head:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"shortcut icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/favicon.ico\"</span> /></span></code></pre>\n<h2 id=\"humanstxt\"><a href=\"#humanstxt\" class=\"phenomic-HeadingAnchor\">#</a>humans.txt</h2>\n<p>What is humans.txt?</p>\n<blockquote>\n<p>It's an initiative for knowing the people behind a website.\nIt's a TXT file that contains information about the different\npeople who have contributed to building the website.</p>\n</blockquote>\n<p>Why humans.txt?</p>\n<blockquote>\n<p>Because it's something simple and fast to create</p>\n</blockquote>\n<p>So why not:) Place it in the root directory of your website\nwith some message to humans and optionally add author tag\nto the <code>&#x3C;head></code> tag:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"author\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/humans.txt\"</span> /></span></code></pre>\n<p>Read more on <a href=\"http://humanstxt.org\">humanstxt.org</a></p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" class=\"phenomic-HeadingAnchor\">#</a>Conclusion</h2>\n<p>And what tools/services are you using for your static websites?</p>\n<div class=\"warning-box\">\n<p>Update on 30/01/2013</p>\n<p>Replace <strong>{% literal %}</strong> with <strong>{% raw %}</strong> tags as Github\nupgraded running version of Liquid.</p>\n</div>\n","__filename":"posts/2012-08-29-things-i-learned-from-personal-website-setup.md","__url":"/2012/things-i-learned-from-personal-website-setup/","__resourceUrl":"/2012/things-i-learned-from-personal-website-setup/index.html","__dataUrl":"/2012/things-i-learned-from-personal-website-setup/index.html.292234a39a352cef0221d45808c15e08.json"}