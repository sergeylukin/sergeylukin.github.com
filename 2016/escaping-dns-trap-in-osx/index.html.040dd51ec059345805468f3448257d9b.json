{"head":{"title":"Escaping DNS trap in OS X","date":"2016-10-25T00:00:00.000Z","layout":"Post","image":"/assets/escaping-dns-trap-in-osx.jpg","imageUrl":"https://unsplash.com/photos/E4944K_4SvI","imageAuthor":"Buzz Andersen","imageAuthorUrl":"https://unsplash.com/@ldandersen","imageProviderName":"Unsplash","imageProviderUrl":"https://unsplash.com/","route":"2016/escaping-dns-trap-in-osx","primaryColor":"rgba(195, 99, 90, .85)","secondaryColor":"#feedd0","linksColor":"#3292ff","linksHoverColor":"#0033c5","description":"Last week a DDoS attack shut down several popular internet sites, including Twitter, Github, PayPal, Reddit, etc. The blackout was a resultâ€¦"},"body":"<p>Last week a DDoS attack shut down several popular internet sites, including\nTwitter, Github, PayPal, Reddit, etc. The blackout was a result of a global\nDDoS attack on Dyn, the domain name service used by these sites.</p>\n<p>In this post I'm going to talk about a way one could use to be able to access\nthese websites by their fully qualified domain names regardless of the fact that\ntheir authoritative servers were not able to respond. Please note that although\nthe method applies to all major Operating Systems, I'm only discussing OS X here.</p>\n<h2 id=\"etcresolvconf\"><a href=\"#etcresolvconf\" class=\"phenomic-HeadingAnchor\">#</a>/etc/resolv.conf</h2>\n<p>Before I dig into the details let me offer a little challenge for you that is\nsomewhat related to this topic.\nAre you a sysadmin or a DevOps? If so then you\nshouldn't have trouble answering following interview question, otherwise just\nread on:</p>\n<blockquote>\n<p>A web application is lagging. One edit the <code>/etc/resolv.conf</code> and add this line\n<code>nameserver 8.8.8.8</code>. It appear to fix the problem. Why?</p>\n</blockquote>\n<p>I've seen this question on\n<a href=\"https://www.quora.com/What-should-a-fullstack-developer-know-in-2016-1/answer/Christian-Baune\">Christian Baune's list of fullstack developer\nquestions</a>\nlist.</p>\n<p>I must admit, it puzzled me at first. The mysterious <code>8.8.8.8</code> just scared me\noff until I performed a reverse DNS lookup using <code>host 8.8.8.8</code> which returned:</p>\n<pre><code class=\"hljs language-bash\">8.8.8.8.in-addr.arpa domain name pointer google-public-dns-a.google.com.</code></pre>\n<p>It turns out <a href=\"https://en.wikipedia.org/wiki/Google_Public_DNS\">Google has a public DNS server that resolves domain names to IP\naddresses</a>, how cool is that?\nSo basically a web application is lagging due to\nsome problems with DNS, which by itself can be pretty much anything, and we\ncan overcome those problems by resolving hosts via Google's public DNS server.\nWhile <a href=\"https://serverfault.com/questions/811123/what-would-happen-if-someone-would-flush-host-from-google-public-dns-while-its\">using Google's public DNS server doesn't mean we eliminiate domain\nname resolving\nproblems</a>\n, there is a big chance you will be able to resolve\nany existing domain name through it and that's exactly what happened in the\nhypothetical (or not?) scenario above.</p>\n<h2 id=\"configure-dns-on-os-x\"><a href=\"#configure-dns-on-os-x\" class=\"phenomic-HeadingAnchor\">#</a>Configure DNS on OS X</h2>\n<p>Now it's time for me to explain how one could use Google's public DNS server\nin OS X and revert back to the original settings if so required.</p>\n<p>There is a pre-installed tool called <code>networksetup</code>, here is a cut\nfrom <code>man networksetup</code>:</p>\n<blockquote>\n<p>networksetup -- configuration tool for network settings in System Preferences.\nThe networksetup command is used to configure network settings typically\nconfigured in the System Preferences application. The\nnetworksetup command requires at least \"admin\" privileges to run. Most of\nthe set commands require \"root\" privileges to run.</p>\n</blockquote>\n<p>First, we'll use <code>networksetup</code> to list all the network services we have:</p>\n<pre><code class=\"hljs language-bash\">networksetup listallnetworkservices</code></pre>\n<p>The command above should produce an output similar to following:</p>\n<pre><code class=\"hljs language-bash\">Wi-Fi\nBluetooth PAN\nThunderbolt Bridge</code></pre>\n<p>Assuming we're using Wi-Fi service, we'd fetch it's current configuration\nby running following command:</p>\n<pre><code class=\"hljs language-bash\">networksetup -getdnsservers Wi-Fi</code></pre>\n<p>There are two possible outputs here: either nothing is configured and the\noutput will look like so (scenario 1):</p>\n<pre><code class=\"hljs language-bash\">There aren<span class=\"hljs-string\">'t any DNS Servers set on Wi-Fi.</span></code></pre>\n<p>...either we have something configured and the output may be similar to\nfollowing (scenario 2):</p>\n<pre><code class=\"hljs language-bash\">10.0.1.1</code></pre>\n<p>Just remember the output and we will get back to it when rolling back.</p>\n<p>Let's overwrite the settings (you may need to enter admin password in the\ndialog that will show up):</p>\n<pre><code class=\"hljs language-bash\">networksetup -setdnsservers Wi-Fi 8.8.8.8</code></pre>\n<p>Now any domain name you try to visit via your browser should be resolved\nusing Google's public DNS server. That was pretty easy, wasn't it?</p>\n<p>Later on when you need to roll back, just run the following command in\ncase you didn't have anything configured for the network service:</p>\n<pre><code class=\"hljs language-bash\">networksetup -setdnsservers Wi-Fi Empty</code></pre>\n<p>Or if you had something configured, say <code>10.0.1.1</code> then run:</p>\n<pre><code class=\"hljs language-bash\">networksetup -setdnsservers Wi-Fi 10.0.1.1</code></pre>\n<p>That's it! Thanks for reading. Happy domain names resolving :)</p>\n","__filename":"posts/2016-10-25-escaping-dns-trap-in-osx.md","__url":"/2016/escaping-dns-trap-in-osx/","__resourceUrl":"/2016/escaping-dns-trap-in-osx/index.html","__dataUrl":"/2016/escaping-dns-trap-in-osx/index.html.040dd51ec059345805468f3448257d9b.json"}